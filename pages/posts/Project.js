import Head from 'next/head'
import Sidebar from '../../components/Sidebar'
import Widgets from '../../components/Widgets'
import Post from '../../components/Post'
import {ArrowLeftIcon } from "@heroicons/react/outline"
import { useRouter } from 'next/router'
import { useState } from "react";
import { useSession } from "next-auth/react";
import {addDoc, collection, serverTimestamp, doc, updateDoc, query, where, getDocs} from "firebase/firestore"
import {db, storage} from "../../firebase"



export default function Project() {
    const router=useRouter()
    const { data: session } = useSession();
    const [projectTitle, setProjectTitle] = useState("");
    const [projectDescription, setProjectDescription] = useState("");
    const [projectStartDate, setProjectStartDate] = useState("");
    const [projectEndDate, setProjectEndDate] = useState("");

    const [searchQuery, setSearchQuery] = useState('');
    const [suggestions, setSuggestions] = useState([]);
    const [searchResults, setSearchResults] = useState([]);





    const handleSearch = async (event) => {
        const inputValue = event.target.value;
        setSearchQuery(inputValue);

        if (inputValue.length > 0) {
            // Query for user suggestions based on the input value
            const usersRef = collection(db, 'users');
            const q = query(usersRef, where('name', '>=', inputValue), where('name', '<=', inputValue + '\uf8ff'));
            const querySnapshot = await getDocs(q);

            // Map through the documents and set suggestions
            const fetchedSuggestions = querySnapshot.docs.map((doc) => ({
                id: doc.id,
                ...doc.data(),
            }));

            setSuggestions(fetchedSuggestions);
        } else {
            setSuggestions([]); // Clear suggestions if the input is empty
        }
    }




    const handleSuggestionClick = (suggestion) => {
        setSearchQuery(suggestion.name); // Set the input to the selected suggestion's name
        setSuggestions([]); // Clear suggestions
        // You can also perform other actions here, such as setting the selected user's ID to state
    };











    const sendProjectInfo = async () => {

        try {
             const docRef = await addDoc(collection(db, "posts"), {
                id:session.user.uid,
                projectTitle: projectTitle, 
                projectDescription:projectDescription,
                projectStartDate:projectStartDate,
                projectEndDate:projectEndDate,

                name: session.user.name, 
                username: session.user.username, 
                userImg:session.user.image, 
                timestamp: serverTimestamp(), 
            });

            console.log("Document written with ID: ", docRef.id);
            setProjectTitle("");
            setProjectDescription("");
            setProjectStartDate("");
            setProjectEndDate("");
            
            
            router.push("../SelfTrack");
        } catch (e) {
            console.error("Error adding document: ", e);
        }
    };

return (
    <div>
      <Head>
        <title>AddProject</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen max-w-7xl mx-auto">
            {/*Sidebar*/}
      

    <div className="xl:ml-[300px] xl:min-w-[650px] sm:ml-[100px] flex-grow max-w-xl">
    <div className="flex items-center space-x-2 py-2 px-3 sticky top-0 z-50 bg-white border-b border-gray-200">
    <div classname="hoverEffect">
         <ArrowLeftIcon onClick={()=>router.push("/")} className="h-5" />
    </div>
    <h2 className="text-lg sm:text-xl font-bold cursor-pointer">Add Your Project</h2>
  
  
    </div>  

            <div className="mt-10">
                    <label htmlFor="projectTitle" className="block text-sm font-bold text-gray-700 mb-2">
                     *Project Title
                    </label>
                    <textarea className="w-full border border-gray-200 focus:border-gray-400 focus:ring-0 text-lg tracking-wide min-h-[50px] text-gray-700" rows="1" 
                    placeholder="Project Title" 
                    value={projectTitle}
                    onChange={(e)=>setProjectTitle(e.target.value)}
                    ></textarea>
             </div>


             <div className="mt-10">
                    <label htmlFor="projectTitle" className="block text-sm font-bold text-gray-700 mb-2">
                     *Project Description
                    </label>
                    <textarea className="w-full border border-gray-200 focus:border-gray-400 focus:ring-0 text-lg tracking-wide min-h-[50px] text-gray-700" rows="5" 
                    placeholder="Project Description" 
                    value={projectDescription}
                    onChange={(e)=>setProjectDescription(e.target.value)}
                    ></textarea>
             </div>

             {/******/}

             <div className='flex  justify-between'>

             <div className="mt-4">
  <label htmlFor="projectStartDate" className="block text-sm font-bold text-gray-700 mb-2">
    Project Start Date
  </label>
  <input
    type="date"
    id="projectStartDate"
    name="projectStartDate"
    value={projectStartDate} // Ensure you have defined this state and its setter
    onChange={(e) => setProjectStartDate(e.target.value)}
    className="border border-gray-300 p-2 rounded-lg"
  />

  <label htmlFor="projectEndDate" className="mt-4 block text-sm font-bold text-gray-700 mb-2">
    Project End Date
  </label>
  <input
    type="date"
    id="projectEndDate"
    name="projectEndDate"
    value={projectEndDate} // Ensure you have defined this state and its setter
    onChange={(e) => setProjectEndDate(e.target.value)}
    className="border border-gray-300 p-2 rounded-lg"
  />
</div>

{/* Search Box */}
<div className="relative mt-10">
<label htmlFor="projectStartDate" className="block text-sm font-bold text-gray-700 mb-2">
    Search Collaborators*
  </label>
                <input
                    type="text"
                    value={searchQuery}
                    onChange={handleSearch}
                    placeholder="Search ..."
                    className="border border-gray-200 p-2 rounded-lg w-96"
                />



{suggestions.length > 0 && (
                    <div className="absolute top-full left-0 right-0 bg-white border border-gray-300 mt-1 rounded-lg z-10">
                        {suggestions.map((suggestion) => (
                            <div
                                key={suggestion.id}
                                onClick={() => handleSuggestionClick(suggestion)}
                                className="p-2 hover:bg-gray-100 cursor-pointer"
                            >
                                {suggestion.name}
                            </div>
                        ))}
                    </div>
                )}



















</div>

</div>


{/******/}





             <div className="mt-10">
             <button onClick={sendProjectInfo}  disabled={!projectTitle.trim() || !projectDescription.trim()} className="bg-blue-400 text-white px-4 py-1.5 rounded-full font-bold shadow-md hover:brightness-20 disabled:opacity-50" >Add</button>
             </div>



    </div>   
    



      </main>
        
   

    </div>  
    

    )
    
  
}
